// ====================

Modern C++

Peter Loos

peter.loos@gmx.de

// ====================

Donnerstag

// ====================


(((((((std::out << 1) << 2) << 3) << 4) << 5) << 6) << 7) ;

printerModern(1, 2, 3, 4, 5, 6, 7);

void printerModern(auto ... args) {
    (std::cout << ... << args);
}


Folding: 

Interessante Operator // Spezialfall:

Operator:  Komma-Operator   ,  

Sequenz - Operator.

Folding über einem Komma

Folding over a comma   

Verständnis  // Lesen   Folding
 
================================================

STL - Container

Homogener Container

std::vector <int>

Heterogene Container:

C# / Java:  ArrayList<Object>

C++:  Container mit std::variant

Fallstudie:

Buchhandlung:

Medien  ==> Buch, CD, DVD, BlueRay, Magazin 

a) Vererbung:

   C++ Schnittstelle  => Um für viele verschiedene Klassen
                         einen gemeinsamen Nenner zu haben

   virtual

   Container mit verschiedenen Objekten: 
   Typ des Containers: Basis-Schnittstelle

   ==> Negativ bashing: virtual ==> Performanz (indirekter Methodenaufruf)

b) Statischer Polymorphismus:

   Betrachte viele verschiedene Klassen

   KEIN gemeinsamer Nenner (keine Basisklasse / Schnittstelle)

   Typ des Containers: std::vector of std::variant
   
Beispiel:  Buchhandlung ==> Type Erasure

Überlegung:

Performanz

Flexibilität // Keine Basisklassen notwendig

Was ist Type Erasure ????

Typ löschen  // Informationen eines Typs reduzieren

std::variant
std::function  // Lambda, C-Funktionen, Methoden
std::any

===================================================

CRTP

===================================================


  API für Multithreading : Kleinste gemeinsame Nenner

Logger::log

Wie kann ein Thread Ergebnisse zurückliefern

== Kann auf gemeinsame Variablen zugreifen // Problemen des konk. Zugriffs

== Via return;

std::async:


KÖNNTE NOCH einen anderen Vorteil haben:  

Thread Pools

std::thread ==> CreateThread
std::async ==> Thread Pool

===============================================

Mutex-Objekt

Lösung für einen fehlenden .unlock Aufruf

Idee von Smart Pointern:

Hüllen-Objekt:

  Konstruktoren  ===> lock
  Destruktoren   ====> unlock

RAII:   Ressource Acquisition is Initialization


Schicht: 

Mehreren Ebenen // mehreren Einsprungpunkten für den Client:

mutex.lock();


Threading:

               Konkurrenz    // gegenseitigen Ausschluss  // mutual Exclusion   Mutex  // Zwangsserialisierung

               Kooperation:         Thread 1:  wait ();    //      Thread 2:  notify 


               std::condition_variable


std::jthread   ===>  join     j:    Nicolia Josuttis


















































